<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringCloud学习记录</title>
      <link href="2020/12/23/springcloud%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>2020/12/23/springcloud%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="版本选择"><a class="header-anchor" href="#版本选择">¶</a>版本选择</h2><p>SpringCloud和SpringBoot的版本必须严格对应，才能正常运行。</p><p>版本对应查看方式：<a href="https://start.spring.io/actuator/info">发送请求</a>，或者查看SpringCloud具体版本的<a href="https://docs.spring.io/spring-cloud/docs/Hoxton.SR9/reference/html/"> Reference Doc.</a></p><p><img data-src="http://cdn.bitclick.top/image-20201223194446002.png" alt="image-20201223194446002"></p><p><img data-src="http://cdn.bitclick.top/image-20201223194614794.png" alt="image-20201223194614794"></p><a id="more"></a><!--toc--><h2 id="SpringCloud组件选择"><a class="header-anchor" href="#SpringCloud组件选择">¶</a>SpringCloud组件选择</h2><p><img data-src="http://cdn.bitclick.top/SpringCloud%E7%BB%84%E4%BB%B6%E5%8D%87%E7%BA%A7.png" alt="SpringCloud组件升级"></p><h2 id="创建父级工程"><a class="header-anchor" href="#创建父级工程">¶</a>创建父级工程</h2><p>步骤： <strong>约定 &gt; 配置 &gt; 编码</strong></p><p>idea新建maven工程，结构选择<code>maven-archetype-site</code>，设置相关信息。</p><h3 id="约定"><a class="header-anchor" href="#约定">¶</a>约定</h3><p>设置java版本、文件编码utf-8，开启注解。</p><h3 id="配置"><a class="header-anchor" href="#配置">¶</a>配置</h3><p>配置pom文件、删除多余文件夹。</p><p><strong>修改pom文件:</strong></p><ol><li>添加<code>&lt;packaging&gt;pom&lt;/packaging&gt;</code></li><li>添加<code>properties</code>标签，统一管理jar包版本</li><li>添加<code>dependencyManagement</code>标签，同一版本，子模块不用再写groupId和Version</li></ol><p><strong>pom文件示例：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.bitclick<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloudtest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 统一管理jar包版本 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.16.18<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis.plus.spring.boot.version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">mybatis.plus.spring.boot.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">swagger.version</span>&gt;</span>2.4.0<span class="tag">&lt;/<span class="name">swagger.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 子模块继承之后，提供作用：锁定版本+子modlue不用写groupId和version  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--spring boot 2.2.2--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--spring cloud Hoxton.SR1--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--spring cloud alibaba 2.1.0.RELEASE--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.plus.spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--   导入swagger     --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;swagger.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--   导入swagger-ui     --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;swagger.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="编码"><a class="header-anchor" href="#编码">¶</a>编码</h3><h2 id="创建子模块"><a class="header-anchor" href="#创建子模块">¶</a>创建子模块</h2><h3 id="约定-v2"><a class="header-anchor" href="#约定-v2">¶</a>约定</h3><p>按照约定创建子module，设置jdk、文件编码</p><h3 id="配置-v2"><a class="header-anchor" href="#配置-v2">¶</a>配置</h3><ol><li>修改pom文件。</li><li>创建application.xml配置文件。</li><li>创建SpringBoot启动类。</li><li>idea中创建启动配置，选择SpringBoot启动类。</li></ol><p><img data-src="http://cdn.bitclick.top/image-20201224145412179.png" alt="image-20201224145412179"></p><h2 id="服务注册"><a class="header-anchor" href="#服务注册">¶</a>服务注册</h2><h3 id="CAP定理"><a class="header-anchor" href="#CAP定理">¶</a>CAP定理</h3><p>CAP原则又称CAP定理，指的是在一个分布式系统中，Consistency（数据一致性）、Availability（服务可用性）、Partition-toelerance（分区容错性），三者不可兼得，只能进行三选二。</p><table><thead><tr><th>名称</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td><strong>Consistency（数据一致性）</strong></td><td style="text-align:left">数据一致性(Consistency)也叫做数据原子性系统在执行某项操作后仍然处于一致的状态。在分布式系统中，更新操作执行成功后所有的用户都应该读到最新的值，这样的系统被认为是具有强一致性的。等同于所有节点访问同一份最新的数据副本。</td></tr><tr><td><strong>Availability（服务可用性）</strong></td><td style="text-align:left">每一个操作总是能够在一定的时间内返回结果，这里需要注意的是&quot;一定时间内&quot;和&quot;返回结果&quot;。一定时间内指的是，在可以容忍的范围内返回结果，结果可以是成功或者是失败。</td></tr><tr><td><strong>Partition-toelerance（分区容错性）</strong></td><td style="text-align:left">系统中任意信息的丢失或失败不会影响系统的继续运作。</td></tr></tbody></table><table><thead><tr><th>示例</th><th>解释</th></tr></thead><tbody><tr><td><strong>Zookeeper</strong></td><td>CA模式，Zookeeper分布式集群是主从模式的。1. 同一时间只有一个节点node对外提供服务，其他从节点实时从主节点备份数据。2. 当主节点宕机时，就会选择一个新的从节点作为主节点。这两点保证了数据一致性和服务可用性。对于分区容错性是无法保证的，当主节点宕机时，整个集群会暂时无法运作，需要时间切换节点。</td></tr><tr><td><strong>Eureka</strong></td><td>AP模式。Eureka集群是无主模式（平等模式）的。1. Eureka集群中的每一个节点都对外提供服务，当有服务节点宕机时，它的请求会被转发给其他节点，从而保证了分区容错性和服务可用性。2. 集群中的节点通过网络交换彼此的数据，因此每个节点的数据不是实时一致的，在某个时间可能存在差异，就无法保证数据一致性。</td></tr></tbody></table><h3 id="服务注册中心-Eureka"><a class="header-anchor" href="#服务注册中心-Eureka">¶</a>服务注册中心-Eureka</h3><p>优质文章教程：<a href="https://www.cnblogs.com/jing99/p/11576133.html">SpringCloud之Eureka注册中心原理及其搭建</a></p><h4 id="Eureka简介"><a class="header-anchor" href="#Eureka简介">¶</a>Eureka简介</h4><p>Eureka是Netflix开发的服务注册发现框架，包括Eureka-Server服务端用于提供服务注册功能、Eureka-Client客户端用于与服务端交互。</p><p><strong>Eureka工作原理：</strong></p><p><img data-src="http://cdn.bitclick.top/image-20201225102819221.png" alt="image-20201225102819221"></p><blockquote><p>Register：服务提供者将自己的信息提交到注册中心注册，包括IP和端口</p><p>Renew： 服务续约，提供者每个30秒（默认）发送心跳包给注册中心，声明自己服务正常</p><p>Cancel：服务下线，当提供者需要关闭服务时，需要发送消息给注册中心，将自己从服务列表中删除</p><p>Get Registry：获取其他服务列表</p><p>Replicate： Eureka集群数据通信与同步</p><p>Make Remote Call：远程调用，消费者调用提供者提供的服务</p></blockquote><h4 id="单机版Eureka服务搭建示例"><a class="header-anchor" href="#单机版Eureka服务搭建示例">¶</a>单机版Eureka服务搭建示例</h4><p>步骤：建工程 &gt; 改pom &gt; 改yml &gt; 启动类</p><p><span style = "color:#9c0" >在编辑eureka-sever的pom时，尽量不要引入其他多余的dependency，避免和spring-cloud-starter-netflix-eureka-server冲突，从而导致无法引入EnableEurekaServer。一般只需要eureka、spring-boot-starter-web、spring-boot-starter-actuator.</span></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>服务端的配置文件主要包含几个字段：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="comment"># 指定服务端对外提供服务的端口</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment"># 指定服务端主机名</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment"># 不向注册中心注册自己，因为只有一个注册中心，不要自己注册自己，避免回路注册逻辑</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 不检索服务列表，因为只有一个注册中心，避免回路发现逻辑</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment"># 指定对外提供服务的地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure><p>启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// 通过该注解指定为Eureka服务端</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaMain7001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaMain7001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="集群版Eureka搭建示例"><a class="header-anchor" href="#集群版Eureka搭建示例">¶</a>集群版Eureka搭建示例</h4><p>集群版就是多个单机版的联合，搭建和单机版类似，只需哟修改配置文件即可。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务1配置</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment"># 其他节点的服务地址，存在多个用逗号分隔</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7002.com:7002/eureka/</span></span><br><span class="line">     </span><br><span class="line"><span class="comment"># 服务2配置</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7002</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7002.com</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 指定服务名称，在Eureka面板中可以看到</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server-7002</span></span><br></pre></td></tr></table></figure><h4 id="服务注册-v2"><a class="header-anchor" href="#服务注册-v2">¶</a>服务注册</h4><p>步骤：建工程 &gt; 改pom &gt; 改yml &gt; 启动类 &gt; 编码</p><h5 id="服务提供者"><a class="header-anchor" href="#服务提供者">¶</a>服务提供者</h5><p>将提供者注册成为client需要导入eureka-client依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件中需要添加eureka相关配置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment"># 指定实例ID</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">cloud-provider-payment8001</span></span><br><span class="line">    <span class="comment"># client注册时使用IP地址，而不是主机名</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># client的IP地址</span></span><br><span class="line">    <span class="attr">ip-address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment"># 注册中心地址，多个注册中心使用都好分割</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span></span><br></pre></td></tr></table></figure><p>启动类中需要添加<code>@EnableEurekaClient</code>注解，配置成client。</p><h5 id="服务消费者"><a class="header-anchor" href="#服务消费者">¶</a>服务消费者</h5><p>服务消费者的配置过程同提供者一样，不同的是消费者在消费过程中使用RestTemplate需要配置负载均衡等。</p><p>RestTemplate配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span> <span class="comment">// 配置负载均衡,默认策略是轮询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置请求URL</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PAYMENT_URL = <span class="string">&quot;http://CLOUD-PAYMENT-SERVICE&quot;</span>;</span><br></pre></td></tr></table></figure><p>这个链接内容可以在Eureka中查到。这个值可以通过<code>eureka.instance.appname</code>和<code>spring.application.name</code>两个属性设置，其中<code>eureka.instance.appname</code>优先级更高。</p><p><img data-src="http://cdn.bitclick.top/image-20201225115032788.png" alt="image-20201225115032788"></p><p>消费类示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PAYMENT_URL = <span class="string">&quot;http://CLOUD-PAYMENT-SERVICE&quot;</span>;</span><br><span class="line"><span class="comment">//    public static final String PAYMENT_URL = &quot;http://localhost:8001&quot;;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/consumer/payment/create&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Boolean&gt; <span class="title">create</span><span class="params">(Payment payment)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.postForObject(PAYMENT_URL + <span class="string">&quot;/payment/create&quot;</span>, payment, CommonResult.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(PAYMENT_URL + <span class="string">&quot;/get/&quot;</span> + id, CommonResult.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="服务发现Discovery"><a class="header-anchor" href="#服务发现Discovery">¶</a>服务发现Discovery</h4><p>client可以通过配置Discovery获取到server的服务信息。</p><p>配置步骤：</p><ol><li><p>启动类上添加<code>@EnableDiscoveryClient</code>注解。</p></li><li><p>编码，在controller中添加discoveryClient，即可发现server上的服务信息，示例：</p><p>注意DiscoveryClient对应的jar包是<code>org.springframework.cloud.client.discovery.DiscoveryClient</code></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/discovery&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">discovery</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;String&gt; services = discoveryClient.getServices();</span><br><span class="line">        services.forEach(log::info);</span><br><span class="line">        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;CLOUD-PAYMENT-SERVICE&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (ServiceInstance instance : instances)&#123;</span><br><span class="line">            log.info(instance.getServiceId() + <span class="string">&quot;:&quot;</span> + instance.getHost() + <span class="string">&quot;:&quot;</span> + instance.getPort() + <span class="string">&quot;:&quot;</span> + instance.getUri());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.discoveryClient;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自我保护模式"><a class="header-anchor" href="#自我保护模式">¶</a>自我保护模式</h4><blockquote><p>自我保护模式正是一种针对网络异常波动的安全保护措施，使用自我保护模式能使Eureka集群更加的健壮、稳定的运行。</p></blockquote><p>client默认每隔30秒向server发送心跳包，server通过这个心跳包检测client的健康状态。如果超过90秒（默认）没有收到实例的心跳包，就会认为改client出现故障，便会将这个client移除服务列表。</p><p>但是如果是因为server和client之间的通信网络导致收不到心跳包，那么就会删除所有client，为了避免这个问题，Eureka设置了自我保护模式，当15分钟内超过85%的client都没有了心跳，那么Eureka将不再删除client，而是将他们置为无效服务。</p><p><strong>85%是怎么计算的呢？</strong> 失效的提供者+消费者（不包括server）/总注册数（提供者+消费者+注册的server）。</p><p>进入自我保护实际条件：==Renews (last min) &lt; Renews threshold==</p><blockquote><p>Renews (last min)：上一分钟收到的实际续约数</p><p>Renews threshold：期望收到的实际续约数</p></blockquote><p><img data-src="http://cdn.bitclick.top/image-20201225141353637.png" alt="image-20201225141353637"></p><h5 id="自我保护模式相关配置"><a class="header-anchor" href="#自我保护模式相关配置">¶</a>自我保护模式相关配置</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="comment"># 禁用自我保护机制</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 自我保护开启阈值，默认是0.85</span></span><br><span class="line">    <span class="attr">renewal-percent-threshold:</span> <span class="number">0.85</span></span><br><span class="line">    <span class="comment"># 续约更新时间，心跳时间，默认30秒，client端配置</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">30</span></span><br><span class="line">    <span class="comment"># 续约到期时间，默认90秒，client端配置，超时将删除client</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">90</span></span><br><span class="line">    <span class="comment"># 清理宕机client的时间间隔，默认60秒，server端配置</span></span><br><span class="line">    <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">60</span><span class="string">*1000</span></span><br></pre></td></tr></table></figure><h3 id="服务注册中心-ZooKeeper"><a class="header-anchor" href="#服务注册中心-ZooKeeper">¶</a>服务注册中心-ZooKeeper</h3><h4 id="ZooKeeper简介"><a class="header-anchor" href="#ZooKeeper简介">¶</a>ZooKeeper简介</h4><blockquote><p>ZooKeeper是一个<a href="https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%BC%8F/19276232">分布式</a>的，开放源码的<a href="https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/9854429">分布式应用程序</a>协调服务，是<a href="https://baike.baidu.com/item/Google">Google</a>的Chubby一个<a href="https://baike.baidu.com/item/%E5%BC%80%E6%BA%90/246339">开源</a>的实现，是Hadoop和<a href="https://baike.baidu.com/item/Hbase/7670213">Hbase</a>的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。</p></blockquote><p>Zookeeper与Eureka不同，它不需要编写实际的代码，只需要将其搭建起来就可以使用。</p><h4 id="ZooKeeper单机版搭建示例"><a class="header-anchor" href="#ZooKeeper单机版搭建示例">¶</a>ZooKeeper单机版搭建示例</h4><h5 id="Zookeeper安装教程（Linux）"><a class="header-anchor" href="#Zookeeper安装教程（Linux）">¶</a>Zookeeper安装教程（Linux）</h5><p>步骤：前提条件 &gt; 下载安装包 &gt; 解压 &gt; 修改config &gt; 开启服务 &gt; 连接客户端</p><p><strong>前提条件：</strong>  Zookeeper依赖Java环境，所以Linux需要配置好JDK。</p><p><strong>下载安装包：</strong> 命令如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.5.8/apache-zookeeper-3.5.8-bin.tar.gz</span><br></pre></td></tr></table></figure><p><strong>解压：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf apache-zookeeper-3.5.8-bin.tar.gz</span><br></pre></td></tr></table></figure><p><strong>修改config：</strong> 只需要将./conf/zoo_simple.cfg 文件重命名成zoo.cfg即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp conf/zoo_sample.cfg conf/zoo.cfg</span><br></pre></td></tr></table></figure><p><strong>开启服务：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 开启服务</span></span><br><span class="line">./bin/zkServer.sh start</span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止服务</span></span><br><span class="line">./bin/zkServer.sh stop</span><br></pre></td></tr></table></figure><p><strong>开启本地客户端watch：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/skCli.sh</span><br></pre></td></tr></table></figure><p>执行上面几步之后，Zookeeper服务就部署好了。</p><h4 id="客户端注册"><a class="header-anchor" href="#客户端注册">¶</a>客户端注册</h4><h5 id="服务提供者-v2"><a class="header-anchor" href="#服务提供者-v2">¶</a>服务提供者</h5><p>步骤：建工程 &gt; 改pom &gt; 改yml &gt; 启动类 &gt; 编码</p><p><strong>改pom：</strong> 要将服务注册到Zookeeper上，需要导入Zookeeper服务发现依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>改yml：</strong> yml配置文件需要添加Zookeeper相关配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line"># 服务名称</span><br><span class="line">    name: cloud-provider-payment8004</span><br><span class="line">  cloud:</span><br><span class="line">    zookeeper:</span><br><span class="line">  # ZooKeeper服务注册中心的地址，多个用逗号分隔</span><br><span class="line">      connect-string: localhost:2181</span><br></pre></td></tr></table></figure><p><strong>启动类：</strong> 启动类上需要加上<code>@EnableDiscoveryClient</code>注解。</p><h5 id="服务消费者-v2"><a class="header-anchor" href="#服务消费者-v2">¶</a>服务消费者</h5><p>服务消费者的注册同提供者一样，不过要注意的是，消费者使用RestTemplate来调用提供者的服务，需要配置负载均衡。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="comment">// LoadBalanced开启负载均衡，默认策略是轮询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderZKController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 服务调用URL是提供者设置的服务名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String INVOKE_URL = <span class="string">&quot;http://cloud-provider-payment8004&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/zk&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPaymentInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(INVOKE_URL + <span class="string">&quot;/payment/zk&quot;</span>, String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="ZooKeeper集群搭建示例（伪集群）"><a class="header-anchor" href="#ZooKeeper集群搭建示例（伪集群）">¶</a>ZooKeeper集群搭建示例（伪集群）</h4><p>步骤：修改配置文件 &gt; 分别启动服务 &gt; 注册服务</p><p><strong>创建配置文件：</strong> 创建三份配置文件，分别对应三个注册服务中心。</p><p><img data-src="http://cdn.bitclick.top/image-20201226170150678.png" alt="image-20201226170150678"></p><p><strong>修改配置文件：</strong> 分别修改三份配置文件dataDir数据目录和clientPort端口号，并在配置文件中添加如下配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># server.myid=ip:port1:port2</span><br><span class="line"># myid 服务的id号</span><br><span class="line"># ip 服务所在IP地址或主机名</span><br><span class="line"># port1 follow主机与leader主机通信的端口 port2 用于选举新leader的端口</span><br><span class="line">server.1=localhost:2232:3332</span><br><span class="line">server.2=localhost:2234:3334</span><br><span class="line">server.3=localhost:2233:3333</span><br></pre></td></tr></table></figure><p><strong>创建myid文件：</strong> 去配置文件中定义的dataDir目录创建myid文件，内容就是myid。</p><p><img data-src="http://cdn.bitclick.top/image-20201226171155761.png" alt="image-20201226171155761"></p><p><strong>启动服务：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动服务</span></span><br><span class="line">./bin/zkServer.sh start ./conf/zoo1.cfg</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看状态</span></span><br><span class="line">./bin/zkServer.sh status ./conf/zoo1.cfg</span><br></pre></td></tr></table></figure><p><img data-src="http://cdn.bitclick.top/image-20201226183045357.png" alt="image-20201226183045357"></p><p><strong>开启watcher客户端：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 指定主机名和端口号</span></span><br><span class="line">./bin/zkCli.sh -server localhost:2181</span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    zookeeper:</span><br><span class="line">      connect-string: localhost:2181,localhost:2182,localhost:2183</span><br><span class="line">  application:</span><br><span class="line">    name: cloud-consumer-order80</span><br></pre></td></tr></table></figure><p><img data-src="http://cdn.bitclick.top/image-20201226184151743.png" alt="image-20201226184151743"></p><h4 id="ZooKeeper能够作为注册中心的原理"><a class="header-anchor" href="#ZooKeeper能够作为注册中心的原理">¶</a>ZooKeeper能够作为注册中心的原理</h4><p>Zookeeper采用的主从模式，使用Paxos算法选举leader服务器，只有leader服务器对外提供服务注册功能，其他follow服务器实时备份leader服务器数据。</p><p>Zookeeper有一个Watcher，他可以查询到Zookeeper的结构，SpringCloud可以通过Zookeeper提供的API实现将信息存储到Zookeeper中，也可以通过Watcher检测到Zookeeper中结构数据的变化，从而实现服务的注册和发现。</p><p>Zookeeper同样有心跳机制。</p><h3 id="服务注册中心-Consul"><a class="header-anchor" href="#服务注册中心-Consul">¶</a>服务注册中心-Consul</h3><p>Consul安装配置更加简单，Windows下只需要下载压缩包，解压即可使用命令行运行，<a href="https://releases.hashicorp.com/consul/1.9.0/consul_1.9.0_windows_amd64.zip">下载地址</a>。</p><p>使用如下命令启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">consul agent -dev</span><br></pre></td></tr></table></figure><h4 id="服务注册-v3"><a class="header-anchor" href="#服务注册-v3">¶</a>服务注册</h4><p>服务提供者和服务消费者的注册都和Zookeeper的方法类似，唯一不同的是引入的依赖不同，配置文件不同。</p><p><strong>pom依赖：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>配置文件：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-consumerconsul-order80</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">ip-address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">        <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment"># 指定注册中心地址，多个用逗号分隔</span></span><br><span class="line">        <span class="attr">acl-token:</span> <span class="string">localhost:8500</span></span><br></pre></td></tr></table></figure><h2 id="服务调用"><a class="header-anchor" href="#服务调用">¶</a>服务调用</h2><h3 id="Ribbon-RestTemplate"><a class="header-anchor" href="#Ribbon-RestTemplate">¶</a>Ribbon+RestTemplate</h3><h4 id="负载均衡"><a class="header-anchor" href="#负载均衡">¶</a>负载均衡</h4><p>负载均衡分为两类，一类是集中式，一类是分散式。集中式的负载均衡是集中对请求进行分配，如NGINX，它将收到的请求根据特定的规则进行分配，所有的分配都由NGINX服务器负责。Ribbon则是分散式的负载均衡，服务消费者根据特定的规则请求不同的提供者。</p><h4 id="Ribbon负载均衡的基本原理"><a class="header-anchor" href="#Ribbon负载均衡的基本原理">¶</a>Ribbon负载均衡的基本原理</h4><p>推荐文章：<a href="https://www.jianshu.com/p/1bd66db5dc46">Ribbon详解</a></p><p>Ribbon通过LoadBalancer实现负载均衡，只需在RestTemplate注册的方法中添加<code>@LoadBalanced</code>注解即可开启负载均衡。</p><p>LoadBalancer通过一个<code>LoadBalancerInterceptor</code>拦截器拦截RestTemplate发出的请求，获取到请求中的URI以及HostName，这个HostName实际上就是一个服务提供者的ID名称，从而确定要请求的服务。</p><p>确定服务后，Ribbon会结合SpringBoot检查是否指定了具体的LoadBalance，否则使用默认的LoadBalance，看是否指定了<code>LoadBalancer</code>，否则将指定默认的<code>LoadBalancer</code>。确定了LoadBalance，然后会确定是否指定了均衡策略Rule，否则采用默认的<code>RoundRobinRule</code>轮询规则。</p><h4 id="如何指定其他规则？"><a class="header-anchor" href="#如何指定其他规则？">¶</a>如何指定其他规则？</h4><p>首先将自己的需要的规则加入到Spring容器，注意这个配置类不能放在启动类的同一个包或者子包下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySelfRule</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">getRandomRule</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 使用自带的随机选择Rule</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RandomRule();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="http://cdn.bitclick.top/image-20201227145953364.png" alt="image-20201227145953364"></p><p>然后在启动类上添加注解，指定规则，name指定服务名称，configuration指定规则配置类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RibbonClient(name = &quot;CLOUD-PAYMENT-SERVICE&quot;, configuration = MySelfRule.class)</span></span><br></pre></td></tr></table></figure><h3 id="OpenFeign"><a class="header-anchor" href="#OpenFeign">¶</a>OpenFeign</h3><p>OpenFeign是基于Ribbon的Http客户端，它采用的是基于接口的方式，不需要像RestTemplate那样显式的调用服务接口，只需要像服务提供者那样编写service接口即可。</p><h4 id="基本使用"><a class="header-anchor" href="#基本使用">¶</a>基本使用</h4><p>pom导入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>开启Feign客户端功能，在消费者的启动类上添加注解<code>@EnableFeignClients</code>.</p><p>创建接口service，需要指明service映射的提供者服务名，以及对应的接口，示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;cloud-payment-service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentFeignService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="comment">// 这里的接口必须和提供者里Controller里一致</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/feign/timeout&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentFeignTimeout</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在controller类里调用service方法即可。</p><h4 id="超时配置"><a class="header-anchor" href="#超时配置">¶</a>超时配置</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="comment"># 处理请求的超时时间，默认1秒</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">5000</span></span><br><span class="line">  <span class="comment"># 连接建立的超时时间，默认1秒</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure><h4 id="日志管理"><a class="header-anchor" href="#日志管理">¶</a>日志管理</h4><p>配置文件中设置对应service的日志级别：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">top.bitclick.springcloud.service.PaymentFeignService:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><p>创建Feign的日志config类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.<span class="function">Level <span class="title">feignLoggerLevel</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// NONE,BASIC,HEADERS,FULL Feign的四类日志级别</span></span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>NONE：不打印日志</li><li>BASIC：仅记录请求方法、URL、响应状态码以及执行时间</li><li>HEADERS：BASIC + 请求和响应的header头信息</li><li>FULL：HEADERS + 请求和响应的正文和元数据</li></ul><p><img data-src="http://cdn.bitclick.top/image-20201228100242148.png" alt="FULL日志级别"></p><h2 id="服务容错"><a class="header-anchor" href="#服务容错">¶</a>服务容错</h2><h3 id="相关概念"><a class="header-anchor" href="#相关概念">¶</a>相关概念</h3><h4 id="服务熔断"><a class="header-anchor" href="#服务熔断">¶</a>服务熔断</h4><p>“扇出”：微服务A调用服务B和服务C，而服务B和C又调用其他服务，调用链路像一把扇子一样，这种现象就叫“扇出”。</p><p><img data-src="http://cdn.bitclick.top/soa-1-640.png" alt="img"></p><p>“雪崩效应”：如果扇出的链路上某个服务的响应时间过长或者服务不可用，那么服务A的调用就会堆积，对服务A的调用就会消耗越来越多的资源，从而引起系统的崩溃，这就是“雪崩效应”。</p><p><img data-src="http://cdn.bitclick.top/soa-2-640.png" alt="img"></p><p><img data-src="http://cdn.bitclick.top/soa-3-640.png" alt="img"></p><p>服务熔断：熔断器——相当于电路中的保险丝，当电流过大时，保险丝便会熔断，从而保护电路。服务熔断是应对雪崩效应的一种服务保护机制。当扇出链路中的某个服务不可用时，熔断器为避免大量服务堆积消耗系统资源，服务熔断会使该服务快速返回错误信息，避免长时间等待。检测到服务正常后，熔断又会恢复调用链路。</p><h4 id="服务降级"><a class="header-anchor" href="#服务降级">¶</a>服务降级</h4><p>服务降级是指当服务器压力剧增的情况下，根据业务的情况和流量，对一些服务采取不处理或者更换成简单的处理方式，从而保证核心服务的正常高效运行。所以在高峰期，需要对服务进行降级操作。比如双十一凌晨下单高峰期，淘宝会把相关服务进行降级，如暂停历史订单查询服务，双十一前三十分钟是无法查询历史订单的。</p><h4 id="服务限流"><a class="header-anchor" href="#服务限流">¶</a>服务限流</h4><p>服务限流顾名思义是对服务进行流量限制，如请求的并发数等，当流量达到限制阈值时，就可以另该服务返回错误信息。常见限流算法：<a href="https://baike.baidu.com/item/%E4%BB%A4%E7%89%8C%E6%A1%B6%E7%AE%97%E6%B3%95/6597000?fr=aladdin">令牌桶</a>、<a href="https://baike.baidu.com/item/%E6%BC%8F%E6%A1%B6%E7%AE%97%E6%B3%95">漏桶</a>。</p><h3 id="Hystrix简介"><a class="header-anchor" href="#Hystrix简介">¶</a>Hystrix简介</h3><p>Hystrix文档：<a href="https://github.com/Netflix/Hystrix/wiki">链接</a>。</p><h4 id="How-Does-Hystrix-Accomplish-Its-Goals"><a class="header-anchor" href="#How-Does-Hystrix-Accomplish-Its-Goals">¶</a>How Does Hystrix Accomplish Its Goals?</h4><p>Hystrix是如何完成服务降级熔断的目标的？</p><blockquote><ul><li>Wrapping all calls to external systems (or “dependencies”) in a <code>HystrixCommand</code> or <code>HystrixObservableCommand</code> object which typically executes within a separate thread (this is an example of the <a href="http://en.wikipedia.org/wiki/Command_pattern">command pattern</a>).</li><li>Timing-out calls that take longer than thresholds you define. There is a default, but for most dependencies you custom-set these timeouts by means of “properties” so that they are slightly higher than the measured 99.5th percentile performance for each dependency.</li><li>Maintaining a small thread-pool (or semaphore) for each dependency; if it becomes full, requests destined for that dependency will be immediately rejected instead of queued up.</li><li>Measuring successes, failures (exceptions thrown by client), timeouts, and thread rejections.</li><li>Tripping a circuit-breaker to stop all requests to a particular service for a period of time, either manually or automatically if the error percentage for the service passes a threshold.</li><li>Performing fallback logic when a request fails, is rejected, times-out, or short-circuits.</li><li>Monitoring metrics and configuration changes in near real-time.</li></ul></blockquote><ul><li>1️⃣包装请求：将对外部的请求包装成<code>HystrixCommand</code> 或<code>HystrixObservableCommand</code> 类，每个命令在独立的线程中运行。这里是用来设计模式中的命令模式。</li><li>2️⃣跳闸机制：可以通过配置文件配置服务的超时时间和阈值，当请求该服务的错误率超过设置的阈值时，可以手动或者自动停止对该服务的请求。</li><li>3️⃣资源隔离：为每一个服务创建一个线程池，当线程池满时，新来的请求会被拒绝，而不是等待。</li><li>4️⃣监控：几乎实时的监控调度和配置的更改，比如请求服务超过、失败、超时、拒绝等。</li><li>5️⃣回退机制：当请求失败、超时、拒绝或者发生熔断时，可以执行回退逻辑。</li></ul><p><img data-src="http://cdn.bitclick.top/soa-4-isolation-640.png" alt="img"></p><h4 id="Hystrix工作流程"><a class="header-anchor" href="#Hystrix工作流程">¶</a>Hystrix工作流程</h4><p><img data-src="http://cdn.bitclick.top/hystrix-command-flow-chart.png" alt="img"></p><h3 id="服务降级-Hystrix"><a class="header-anchor" href="#服务降级-Hystrix">¶</a>服务降级-Hystrix</h3><h3 id="服务熔断-Hystrix"><a class="header-anchor" href="#服务熔断-Hystrix">¶</a>服务熔断-Hystrix</h3><hr><hr><h2 id="常见问题"><a class="header-anchor" href="#常见问题">¶</a>常见问题</h2><h3 id="pom文件被忽略？"><a class="header-anchor" href="#pom文件被忽略？">¶</a>pom文件被忽略？</h3><p>设置idea中的maven：</p><p><img data-src="http://cdn.bitclick.top/image-20201224144848133.png" alt="image-20201224144848133"></p><h3 id="pom文件中怎么引入同一级别下的其他子模块？"><a class="header-anchor" href="#pom文件中怎么引入同一级别下的其他子模块？">¶</a>pom文件中怎么引入同一级别下的其他子模块？</h3><p>直接添加依赖即可，指定groupId和artifactId和版本即可。示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.bitclick.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id=""><a class="header-anchor" href="#">¶</a></h4>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringCloud </tag>
            
            <tag> Eureka </tag>
            
            <tag> Zookeeper </tag>
            
            <tag> Consul </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins部署、操作记录</title>
      <link href="2020/12/10/Jenkins%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95/"/>
      <url>2020/12/10/Jenkins%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>参考文章：</p><ul><li><a href="https://www.jianshu.com/p/5f671aca2b5a">Jenkins详细教程</a></li><li><a href="https://blog.csdn.net/boling_cavalry/article/details/78943061">实战：向GitHub提交代码时触发Jenkins自动构建</a></li></ul><a id="more"></a><!--toc--><h3 id="Jenkins部署环境搭建"><a class="header-anchor" href="#Jenkins部署环境搭建">¶</a>Jenkins部署环境搭建</h3><p>所需环境：Git、Maven、JDK、Tomcat。</p><h4 id="Maven环境配置"><a class="header-anchor" href="#Maven环境配置">¶</a>Maven环境配置</h4><ol><li><p>Maven3.3.9，<a href="https://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.3.9/binaries/">下载地址</a>。</p></li><li><p>解压下载的tar.gz，到任意文件夹。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf apache-maven-3.3.9-bin.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>配置系统变量。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编辑Linux变量文件</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在文件后追加</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">set</span> maven environment</span></span><br><span class="line">export MAVEN_HOME = /opt/maven/apache-maven-3.3.9 # Maven解压文件位置</span><br><span class="line">export PATH = $MAVEN_HOME/bin:$PATH</span><br></pre></td></tr></table></figure></li><li><p>使配置文件生效。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li></ol><h4 id="Tomcat配置"><a class="header-anchor" href="#Tomcat配置">¶</a>Tomcat配置</h4><ol><li><p>Tomcat8，<a href="https://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.61/bin/">下载地址</a>。</p></li><li><p>解压下载的tar.gz，到想要的目录。用 <code>tar -zxvf</code>指令。</p></li><li><p>进入bin目录下，执行<code>start.sh</code>即可启动、<code>shutdown.sh</code>即可关闭。</p></li><li><p>配置端口：修改conf/server.xml文件来配置端口。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 修改port配置端口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8888&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="Jenkins配置"><a class="header-anchor" href="#Jenkins配置">¶</a>Jenkins配置</h4><ol><li>下载Jenkins的war包，<a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins/war-stable/2.263.1/jenkins.war">下载地址</a>。</li><li>将下载的war包放到Tomcat的webapp目录下，启动Jenkins，浏览器输入http://localhost:8888/jenkins即可打开Jenkins的设置页。</li></ol><h3 id="GitHub触发Jenkins构建"><a class="header-anchor" href="#GitHub触发Jenkins构建">¶</a>GitHub触发Jenkins构建</h3><p>大致步骤：</p><ol><li>GitHub上准备好需要构建的项目repository、创建webhook，用于GitHub在收到push时通知Jenkins。</li><li>配置<code>secretText</code>，用于GitHub对Jenkins鉴权。</li><li>Jenkins添加上一步的<code>secretText</code>。</li><li>Jenkins创建、配置项目。</li></ol><h4 id="GitHub创建webhook"><a class="header-anchor" href="#GitHub创建webhook">¶</a>GitHub创建webhook</h4><p><img data-src="http://cdn.bitclick.top/image-20201210215012018.png" alt="image-20201210215012018"></p><p><code>Payload URL</code>为==Jenkins地址==加上==github-webhook==</p><p><img data-src="http://cdn.bitclick.top/image-20201210215121806.png" alt="image-20201210215121806"></p><h4 id="GitHub创建secretText"><a class="header-anchor" href="#GitHub创建secretText">¶</a>GitHub创建<code>secretText</code></h4><p><img data-src="http://cdn.bitclick.top/image-20201210215510762.png" alt="image-20201210215510762"></p><p>需要填写note、勾线repo、admin:repo_hook，最后点击保存，会生成一个密钥，复制这个密钥搭配Jenkins里配置。</p><h4 id="Jenkins配置密钥"><a class="header-anchor" href="#Jenkins配置密钥">¶</a>Jenkins配置密钥</h4><p>Jenkins进入系统配置、配置GitHubServer。</p><p><img data-src="http://cdn.bitclick.top/image-20201210220025046.png" alt="image-20201210220025046"></p><p><img data-src="http://cdn.bitclick.top/image-20201210220128111.png" alt="image-20201210220128111"></p><h4 id="Jenkins配置环境"><a class="header-anchor" href="#Jenkins配置环境">¶</a>Jenkins配置环境</h4><p><img data-src="http://cdn.bitclick.top/image-20201210221543609.png" alt="image-20201210221543609"></p><p><img data-src="http://cdn.bitclick.top/image-20201210221602873.png" alt="image-20201210221602873"></p><p><img data-src="http://cdn.bitclick.top/image-20201210221628318.png" alt="image-20201210221628318"></p><h3 id="Jenkins创建、配置项目"><a class="header-anchor" href="#Jenkins创建、配置项目">¶</a>Jenkins创建、配置项目</h3><ol><li><p>创建一个maven项目（Jenkins需要安装maven插件）</p></li><li><p>源码管理配置，注意==Credentials==需要使用账号密码验证，不能使用之前的secretText。</p><p><img data-src="http://cdn.bitclick.top/image-20201210221001390.png" alt="image-20201210221001390"></p></li><li><p>构建触发器</p><p><img data-src="http://cdn.bitclick.top/image-20201210221242140.png" alt="image-20201210221242140"></p><ol start="4"><li><p>构建环境，添加之前设置的secretText。</p><p><img data-src="http://cdn.bitclick.top/image-20201210221336099.png" alt="image-20201210221336099"></p></li><li><p>保存。</p></li></ol></li></ol><h3 id="常见问题"><a class="header-anchor" href="#常见问题">¶</a>常见问题</h3><h5 id="找不到创建maven项目？"><a class="header-anchor" href="#找不到创建maven项目？">¶</a>找不到创建maven项目？</h5><p>需要安装Maven Integration plugin插件。</p><h5 id="构建错误：Maven-JVM-terminated-unexpectedly-with-exit-code-137？"><a class="header-anchor" href="#构建错误：Maven-JVM-terminated-unexpectedly-with-exit-code-137？">¶</a>构建错误：Maven JVM terminated unexpectedly with exit code 137？</h5><p>是jvm的内存小了，编译过程中爆内存了，可以加大虚拟内存。</p><p><a href="https://blog.csdn.net/qq_17046291/article/details/79023305">centOS增加虚拟内存教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatisPlus学习记录</title>
      <link href="2020/12/06/MyBatisPlus%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>2020/12/06/MyBatisPlus%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>查看<a href="https://mybatis.plus/guide/">官方文档</a>。</p><h3 id="日志配置"><a class="header-anchor" href="#日志配置">¶</a>日志配置</h3><p>修改配置文件Application.yml，添加如下配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><a id="more"></a><!--toc--><h3 id="乐观锁配置"><a class="header-anchor" href="#乐观锁配置">¶</a>乐观锁配置</h3><blockquote><p>当要更新一条记录的时候，希望这条记录没有被别人更新<br>乐观锁实现方式：</p><blockquote><ul><li>取出记录时，获取当前version</li><li>更新时，带上这个version</li><li>执行更新时， set version = newVersion where version = oldVersion</li><li>如果version不对，就更新失败</li></ul></blockquote></blockquote><ol><li><p>确保数据库支持乐观锁（带有version相关字段）。</p></li><li><p>给数据<code>entity</code>对应的字段加上<code>@Version</code>注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Version</span></span><br><span class="line"><span class="meta">@ApiModelProperty(value = &quot;版本&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> version;</span><br></pre></td></tr></table></figure></li><li><p>编写<code>MyBatisPlusConfig</code>配置类，在其中加入方法<code>mybatisPlusInterceptor()</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor(); <span class="comment">//创建拦截器</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> OptimisticLockerInnerInterceptor()); <span class="comment">//添加乐观锁拦截器</span></span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testOptimisticLocker2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = userMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;xieyingchao&quot;</span>);</span><br><span class="line"></span><br><span class="line">    User user1 = userMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">    user1.setName(<span class="string">&quot;tangcongxuan&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> num2 = userMapper.updateById(user1);</span><br><span class="line">    System.out.println(num2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num = userMapper.updateById(user);</span><br><span class="line">    System.out.println(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意事项：</p><ul><li><p>乐观锁执行<code>update</code>前，必须先<code>select</code>获取当前的版本。</p></li><li><p>乐观锁version支持的数据类型：<strong>int,Integer,long,Long,Date,Timestamp,LocalDateTime</strong>。</p></li><li><p>仅支持 <code>updateById(id)</code> 与 <code>update(entity, wrapper)</code> 方法。</p></li><li><p>经过乐观锁后一次更新可能会失败，可尝试自旋，多提交几次。</p></li></ul></li></ol><h3 id="自动填充功能配置"><a class="header-anchor" href="#自动填充功能配置">¶</a>自动填充功能配置</h3><ol><li><p>编写<code>handler</code>类、继承<code>MetaObjectHandler</code>、重写<code>insertFill()</code>、<code>updateFill()</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;start insert fill&quot;</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@metaObject</span>: 元数据</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@fieldNmae</span>: 需要填充的字段名</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@fieldType</span>: 字段类型</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@fieldVal</span>: 字段值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">this</span>.strictInsertFill(metaObject, <span class="string">&quot;createTime&quot;</span>, LocalDate.class, LocalDate.now());</span><br><span class="line">        <span class="keyword">this</span>.strictUpdateFill(metaObject, <span class="string">&quot;updateTime&quot;</span>, LocalDate::now, LocalDate.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;start update fill&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.strictUpdateFill(metaObject, <span class="string">&quot;updateTime&quot;</span>, LocalDate::now, LocalDate.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>给相应实体类字段添加注解<code>@TableField</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span> <span class="comment">//插入时自动填充</span></span><br><span class="line"><span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span> <span class="comment">//插入和更新时自动填充</span></span><br><span class="line"><span class="keyword">private</span> Date updateTime;</span><br></pre></td></tr></table></figure></li><li><p><code>MetaObjectHandler</code>提供的默认方法的策略均为:如果属性有值则不覆盖,如果填充值为<code>null</code>则不填充</p></li></ol><h3 id="逻辑删除"><a class="header-anchor" href="#逻辑删除">¶</a>逻辑删除</h3><ol><li><p>数据库具有逻辑删除字段，在对应实体类上添加<code>@TableLogic</code>注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableLogic</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> deleted;</span><br></pre></td></tr></table></figure></li><li><p>修改Application.yml，添加逻辑删除相关说明。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span> <span class="comment">#逻辑删除对应的值</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span> <span class="comment">#不删除对应的值</span></span><br></pre></td></tr></table></figure></li><li><p>MyBatisPlus会自动将<code>delete</code>转换成<code>update</code>。</p></li></ol><h3 id="分页"><a class="header-anchor" href="#分页">¶</a>分页</h3><h4 id="自带组件分页"><a class="header-anchor" href="#自带组件分页">¶</a>自带组件分页</h4><ol><li><p>在<code>MyBatisPlusConfig</code>中添加分页拦截器<code>PaginationInnerInterceptor</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">interceptor.addInnerInterceptor(<span class="keyword">new</span> PaginationInnerInterceptor()); <span class="comment">//添加分页拦截器</span></span><br></pre></td></tr></table></figure></li><li><p>创建<code>Page</code>对象，调用<code>selectPage()</code>。</p></li><li><p>测试用例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testPagination</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">    userMapper.selectPage(page, <span class="keyword">null</span>);</span><br><span class="line">    page.getRecords().forEach(System.out::println);</span><br><span class="line">    System.out.println(page.getTotal());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="自定义SQL分页"><a class="header-anchor" href="#自定义SQL分页">¶</a>自定义SQL分页</h4><p>只需要在<code>mapper</code>函数中带一个<code>Page</code>对象即可实现分页，同时<code>mapper.xml</code>可以从这个<code>Page</code>对象里取值。</p><ol><li><p>Mapper函数添加Page对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;User&gt; <span class="title">selectAllByNamePagination</span><span class="params">(Page&lt;User&gt; page,String name)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">MyPage&lt;User&gt; <span class="title">mySelectPage</span><span class="params">(MyPage&lt;User&gt; myPage, String name)</span></span>;  <span class="comment">//传入自定义Page对象</span></span><br></pre></td></tr></table></figure></li><li><p>编写xml。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAllByNamePagination&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class="line">    select * from user where name = #&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;mySelectPage&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class="line">    select * from user where name = #&#123;name&#125; and age = #&#123;myPage.age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试一下！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testMyPagination</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectAllByNamePagination(page, <span class="string">&quot;xiaoxie&quot;</span>);</span><br><span class="line">    <span class="comment">//page.getRecords().forEach(System.out::println);</span></span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testMyPagination1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    MyPage&lt;User&gt; myPage = <span class="keyword">new</span> MyPage&lt;&gt;(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    myPage.setAge(<span class="number">18</span>);</span><br><span class="line">    userMapper.mySelectPage(myPage,<span class="string">&quot;xiaoxie&quot;</span>);</span><br><span class="line">    myPage.getRecords().forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="性能分析"><a class="header-anchor" href="#性能分析">¶</a>性能分析</h3><p>MyBatisPlus的性能分析依赖p6spy组件，不再由MyBatisPlus配置。</p><h3 id="通用枚举"><a class="header-anchor" href="#通用枚举">¶</a>通用枚举</h3><ol><li><p>枚举类实现<code>IEnum&lt;T&gt;</code>类：</p><p>需要重写<code>getValue()</code>函数，用于将枚举映射成数据库字段值。</p><p>需要重写<code>toString()</code>函数，用于将数据库字段值映射成枚举。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bitclick.demo.enums;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IEnum;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">SexEnum</span> <span class="keyword">implements</span> <span class="title">IEnum</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    MALE(<span class="number">1</span>, <span class="string">&quot;男&quot;</span>),</span><br><span class="line">    FEMALE(<span class="number">0</span>, <span class="string">&quot;女&quot;</span>),</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    SexEnum(<span class="keyword">int</span> value, String desc) &#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.desc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>修改yaml配置文件，指定枚举包所在位置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">type-enums-package:</span> <span class="string">top.bitclick.demo.enums</span></span><br></pre></td></tr></table></figure></li><li><p>测试一下！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testEnum</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(<span class="string">&quot;hahaha&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">22</span>);</span><br><span class="line">    user.setSex(SexEnum.FEMALE);</span><br><span class="line">    <span class="keyword">int</span> insert = userMapper.insert(user);</span><br><span class="line">    System.out.println(insert);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="自定义ID生成器"><a class="header-anchor" href="#自定义ID生成器">¶</a>自定义ID生成器</h3><ol><li><p>创建生成器类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomIdGenerator</span> <span class="keyword">implements</span> <span class="title">IdentifierGenerator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">nextId</span><span class="params">(Object entity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//可以将当前传入的class全类名来作为bizKey,或者提取参数来生成bizKey进行分布式Id调用生成.</span></span><br><span class="line">        String bizKey = entity.getClass().getName();</span><br><span class="line">        <span class="comment">//根据bizKey调用分布式ID生成</span></span><br><span class="line">        <span class="keyword">long</span> id = ....;</span><br><span class="line">        <span class="comment">//返回生成的id值即可.</span></span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> MyBatisPlus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis-Plus-Generator 代码生成器使用模板记录</title>
      <link href="2020/12/05/mybatis-plus-generator%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8%E4%BD%BF%E7%94%A8%E6%A8%A1%E6%9D%BF/"/>
      <url>2020/12/05/mybatis-plus-generator%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8%E4%BD%BF%E7%94%A8%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<p>​AutoGenerator 是 MyBatis-Plus 的代码生成器，通过 AutoGenerator 可以快速生成 Entity、Mapper、Mapper XML、Service、Controller 等各个模块的代码，极大的提升了开发效率。</p><a id="more"></a><!--toc--><h2 id="相关依赖"><a class="header-anchor" href="#相关依赖">¶</a>相关依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybatis-plus start --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis-plus end --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mybatis-plus-generator start--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mybatis-plus-generator end--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- velocity 模板引擎 start --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- velocity 模板引擎 end --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- swagger2 start --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- swagger2 end --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- lombok start --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- lombok start --&gt;</span></span><br></pre></td></tr></table></figure><h2 id="generator类"><a class="header-anchor" href="#generator类">¶</a>generator类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeGeneraction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AutoGenerator mpg = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line"></span><br><span class="line">        String tableName = <span class="string">&quot;user,employee_tml&quot;</span>;</span><br><span class="line">        String projectPath = <span class="string">&quot;E:/My_Works/projects/mp-demo/src/main/java&quot;</span>;</span><br><span class="line">        String projectRoot = <span class="string">&quot;E:/My_Works/projects/mp-demo&quot;</span>;</span><br><span class="line">        String parentName = <span class="string">&quot;top.bitclick.demo&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//全局配置</span></span><br><span class="line">        GlobalConfig gc = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        gc.setOutputDir(projectPath);  <span class="comment">//输出路径</span></span><br><span class="line">        gc.setAuthor(<span class="string">&quot;Xie Yingchao&quot;</span>);  <span class="comment">//作者</span></span><br><span class="line">        gc.setOpen(<span class="keyword">false</span>);             <span class="comment">//是否打开资源浏览器</span></span><br><span class="line">        gc.setSwagger2(<span class="keyword">true</span>);          <span class="comment">//是否配置swagger2</span></span><br><span class="line">        gc.setFileOverride(<span class="keyword">true</span>);      <span class="comment">//是否覆盖原文件</span></span><br><span class="line">        gc.setBaseResultMap(<span class="keyword">true</span>);     <span class="comment">//是否设置resultMap</span></span><br><span class="line">        gc.setEnableCache(<span class="keyword">false</span>);      <span class="comment">//xml 二级缓存</span></span><br><span class="line">        gc.setBaseColumnList(<span class="keyword">true</span>);    <span class="comment">//xml ColumnLis</span></span><br><span class="line">        <span class="comment">//gc.setIdType(IdType.AUTO);     //主键自增策略</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义文件命名，注意 %s 会自动填充表实体属性！</span></span><br><span class="line">        gc.setControllerName(<span class="string">&quot;%sController&quot;</span>);</span><br><span class="line">        gc.setServiceName(<span class="string">&quot;%sService&quot;</span>);</span><br><span class="line">        gc.setServiceImplName(<span class="string">&quot;%sServiceImpl&quot;</span>);</span><br><span class="line">        gc.setMapperName(<span class="string">&quot;%sMapper&quot;</span>);</span><br><span class="line">        gc.setXmlName(<span class="string">&quot;%sMapper&quot;</span>);</span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置数据源</span></span><br><span class="line">        DataSourceConfig dsc = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dsc.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dsc.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        dsc.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/test?serverTimezone=Asia/Shanghai&quot;</span>);</span><br><span class="line">        dsc.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//包配置,设置包名</span></span><br><span class="line">        PackageConfig pc = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        pc.setParent(parentName);</span><br><span class="line">        pc.setController(<span class="string">&quot;controller&quot;</span>);</span><br><span class="line">        pc.setEntity(<span class="string">&quot;entity&quot;</span>);</span><br><span class="line">        pc.setMapper(<span class="string">&quot;mapper&quot;</span>);</span><br><span class="line">        pc.setService(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">        pc.setServiceImpl(<span class="string">&quot;service.impl&quot;</span>);</span><br><span class="line">        pc.setXml(<span class="string">&quot;xml&quot;</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 策略配置</span></span><br><span class="line">        StrategyConfig strategy = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        <span class="comment">// strategy.setTablePrefix(new String[] &#123; &quot;sys_&quot; &#125;);// 此处可以修改为您的表前缀</span></span><br><span class="line">        strategy.setEntityLombokModel(<span class="keyword">true</span>);                <span class="comment">//开启lombok</span></span><br><span class="line">        strategy.setRestControllerStyle(<span class="keyword">true</span>);              <span class="comment">//开启restful风格</span></span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);<span class="comment">// 表名映射实体类名的生成策略</span></span><br><span class="line">        strategy.setInclude(tableName);                      <span class="comment">// 需要生成的表名，与数据库对应</span></span><br><span class="line">        strategy.setTablePrefix(<span class="string">&quot;&quot;</span>);                        <span class="comment">//去除表前缀</span></span><br><span class="line">        strategy.setFieldPrefix(<span class="string">&quot;&quot;</span>);                        <span class="comment">//去除字段前缀</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//strategy.setSuperServiceClass((Class&lt;?&gt;) null);</span></span><br><span class="line">        <span class="comment">//strategy.setSuperServiceImplClass((Class&lt;?&gt;) null);</span></span><br><span class="line">        <span class="comment">//strategy.setSuperMapperClass(null);</span></span><br><span class="line"></span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义配置</span></span><br><span class="line">        InjectionConfig cfg = <span class="keyword">new</span> InjectionConfig() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// to do nothing</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果模板引擎是 freemarker</span></span><br><span class="line">        <span class="comment">//String templatePath = &quot;/templates/mapper.xml.ftl&quot;;</span></span><br><span class="line">        <span class="comment">// 如果模板引擎是 velocity</span></span><br><span class="line">        String templatePath = <span class="string">&quot;/templates/mapper.xml.vm&quot;</span>;</span><br><span class="line">        <span class="comment">// 自定义输出配置</span></span><br><span class="line">        List&lt;FileOutConfig&gt; focList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 自定义配置会被优先输出</span></span><br><span class="line">        focList.add(<span class="keyword">new</span> FileOutConfig(templatePath) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">outputFile</span><span class="params">(TableInfo tableInfo)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！</span></span><br><span class="line">                <span class="keyword">return</span> projectRoot + <span class="string">&quot;/src/main/resources/mybatis/&quot;</span></span><br><span class="line">                        + tableInfo.getEntityName() + <span class="string">&quot;Mapper&quot;</span> + StringPool.DOT_XML;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        cfg.setFileOutConfigList(focList);</span><br><span class="line">        mpg.setCfg(cfg);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置自定义输出模板</span></span><br><span class="line">        <span class="comment">//指定自定义模板路径，注意不要带上.ftl/.vm, 会根据使用的模板引擎自动识别</span></span><br><span class="line">        TemplateConfig tc = <span class="keyword">new</span> TemplateConfig();</span><br><span class="line">        tc.setXml(<span class="keyword">null</span>); <span class="comment">//指定生成的模板，设置成null将不生成文件</span></span><br><span class="line">        mpg.setTemplate(tc);</span><br><span class="line"></span><br><span class="line">        mpg.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Mybatis-Plus </tag>
            
            <tag> 代码生成器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>swagger学习笔记</title>
      <link href="2020/12/03/swagger%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>2020/12/03/swagger%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是Swagger？"><a class="header-anchor" href="#什么是Swagger？">¶</a>什么是Swagger？</h3><blockquote><p>​Simplify API development for users, teams, and enterprises with the Swagger open source and professional toolset.</p></blockquote><p>​一个简化接口文档开发的工具。通过在代码里添加Swagger注解，即可自动生成对应的API文档，不用再手动编写文档。后端开发者通过Swagger自动生成API文档供前端和其他人使用，即使后期修改了接口，只需修改对应的注解，即可修改对应的文档，避免了文档和接口不一致的情况。</p><p><img data-src="http://cdn.bitclick.top/image-20201203191858059.png" alt="image-20201203191858059"></p><a id="more"></a><!--toc--><h3 id="Springfox-Swagger"><a class="header-anchor" href="#Springfox-Swagger">¶</a>Springfox Swagger</h3><p>​Spring官方基于Swagger规范，将Swagger整合成Springfox-Swagger项目，方便整合进Spring项目。</p><p>​<em><strong>Springfox Swagger</strong></em>目前已经更新到3.0.0。</p><h3 id="Springfox-Swagger整合进SpringBoot"><a class="header-anchor" href="#Springfox-Swagger整合进SpringBoot">¶</a>Springfox Swagger整合进SpringBoot</h3><ol><li><h4 id="maven导入依赖："><a class="header-anchor" href="#maven导入依赖：">¶</a>maven导入依赖：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--   导入swagger     --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--   导入swagger-ui     --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><h4 id="编写配置类："><a class="header-anchor" href="#编写配置类：">¶</a>编写配置类：</h4><p>配置类主要用来配置Api的一些信息，定义需要扫描的类或者方法，格式一般比较固定。</p><p>需要创建配置类，并添加<strong>EnableSwagger2</strong>注解，开启Swagger注解模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xieyingchao.config;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">//配置类</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span> <span class="comment">//开启swagger功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2Config</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2) <span class="comment">//指定为Swagger2</span></span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">         .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.xieyingchao.controller&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">            .title(<span class="string">&quot;online_bookstore Swagger接口测试&quot;</span>)</span><br><span class="line">            .description(<span class="string">&quot;网上书城接口文档&quot;</span>)</span><br><span class="line">            .termsOfServiceUrl(<span class="string">&quot;www.bticlick.top&quot;</span>)</span><br><span class="line">            .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">            .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="apiInfo函数："><a class="header-anchor" href="#apiInfo函数：">¶</a><em>apiInfo</em>函数：</h5><p><em>apiInfo</em>函数通过调用<em>ApiInfoBuilder</em>来定义api的一些信息，主要包括：</p><ul><li><em>title</em>：api文档标题</li><li><em>description</em>：文档描述</li><li><em>termsOfServiceUrl</em>：一个url，不知道干什么用的</li><li><em>version</em>：可以定义文档的版本</li><li><em>contact</em>：联系方式，入参是contact对象、String对象</li><li><em>license</em>和<em>licenseUrl</em>：证书</li></ul><p>最后调用<em>build</em>函数构建<em>ApiInfo</em>。</p><h5 id="createRestApi函数：看源码比较好理解"><a class="header-anchor" href="#createRestApi函数：看源码比较好理解">¶</a><em>createRestApi</em>函数：看源码比较好理解</h5><p><em>createRestApi</em>函数返回一个Docket对象。</p><ul><li><p>调用自定义的<em>apiInfo</em>函数，设置api信息。</p></li><li><p>调用<em>select</em>函数，返回一个ApiSelectorBuilder对象。</p></li><li><p>ApiSelectorBuilder对象可以指定在哪里生成api文档，（apis、paths），入参是一个selector。</p></li><li><p>比如在哪些包下（<em>basePackage</em>）、哪些类下（declaringClass、withClassAnnotation）、哪些方法下（withMethodAnnotation）。</p></li><li><p>如果不指定包、类或者方法，就会根据默认进行选择。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ApiSelector DEFAULT = <span class="keyword">new</span> ApiSelector(Predicates.and(Predicates.not(RequestHandlerSelectors.withClassAnnotation(ApiIgnore.class)), Predicates.not(RequestHandlerSelectors.withMethodAnnotation(ApiIgnore.class))), PathSelectors.any());</span><br></pre></td></tr></table></figure><p>默认是选择所有没打<em>ApiIgnore</em>注释的类和方法，以及全部路径。</p></li><li><p>最后调用<em>build</em>函数构建。</p></li></ul></li><li><h4 id="在类或者方法上添加注释。"><a class="header-anchor" href="#在类或者方法上添加注释。">¶</a>在类或者方法上添加注释。</h4></li><li><h4 id="启动项目"><a class="header-anchor" href="#启动项目">¶</a>启动项目</h4><p>在项目地址后面输入 “swagger-ui.html”，即可进入Swagger ui界面</p><p><img data-src="http://cdn.bitclick.top/image-20201203205255190.png" alt="image-20201203205255190"></p></li></ol><h3 id="Swagger常见注释"><a class="header-anchor" href="#Swagger常见注释">¶</a>Swagger常见注释</h3><p>具体内容在<code>io.swagger.annotations</code>、<code>springfox.documentation.annotations</code>等包里。</p><table><thead><tr><th style="text-align:left">注释名</th><th>特殊属性</th><th>用法</th><th>示例</th></tr></thead><tbody><tr><td style="text-align:left">@ApiIgnore</td><td></td><td>添加在方法或类上</td><td>忽略这个类或者方法，不展示。</td></tr><tr><td style="text-align:left">@Api</td><td>tags、values、hidden</td><td>添加在类上，tags打标签代替默认名字</td><td>@Api(value = “书籍Controller”,tags = “书籍的CRUD”, hidden = true)</td></tr><tr><td style="text-align:left">@ApiOperation</td><td>values、notes、code、response、httpMethod</td><td>添加在方法上，values声明方法的作用、notes实施说明，httpMethod声明方法</td><td>@ApiOperation(value = “插入书籍”, code = 200, notes = “用于插入书籍”, response = Book.class, httpMethod = “post”)</td></tr><tr><td style="text-align:left">@ApiImplicitParams</td><td></td><td>添加在方法上，声明一组参数。</td><td>@ApiImplicitParams({         @ApiImplicitParam(name = “book”,                 value = “书籍类”, required = true, paramType = “json”, examples = @Example(value = @ExampleProperty(mediaType = “json”,                        value = “测试” ))         ) })</td></tr><tr><td style="text-align:left">@ApiImplicitParam</td><td>paramType：参数放在哪里dataType：参数类型</td><td>添加在ApiImplicitParams里，用于声明一个参数。</td><td></td></tr><tr><td style="text-align:left">@ApiModel</td><td>subTypes</td><td>添加在响应类上，如Book</td><td>@ApiModel(“书籍对象”)</td></tr><tr><td style="text-align:left">@ApiModelProperty</td><td>readOnly</td><td>添加在响应类的属性上</td><td></td></tr><tr><td style="text-align:left">@ApiParam</td><td></td><td>添加在参数前</td><td>@ApiParam(name = “书id”, example = “1024”, required = true, value = “书籍id”)</td></tr><tr><td style="text-align:left">@ApiResponse</td><td></td><td>添加在ApiResponses里，一般表示一个错误信息。</td><td>@ApiResponses({         @ApiResponse(code = 400, message = “请求参数没填好”),         @ApiResponse(code = 500, message = “服务器错误”) })</td></tr><tr><td style="text-align:left">@ApiResponses</td><td></td><td>添加在请求方法上，表示一组响应</td><td></td></tr><tr><td style="text-align:left">@Authorization</td><td></td><td></td><td></td></tr><tr><td style="text-align:left">@AuthorizationScope</td><td></td><td></td><td></td></tr><tr><td style="text-align:left">@Contact</td><td></td><td></td><td></td></tr><tr><td style="text-align:left">@Example</td><td></td><td>添加在examples属性里，表示一个样例。</td><td>examples = @Example(value = @ExampleProperty(mediaType = “json”,         value = “测试” ))</td></tr><tr><td style="text-align:left">@ExampleProperty</td><td></td><td>添加在@Example里，表示一个样例。</td><td></td></tr><tr><td style="text-align:left">@Extension</td><td></td><td></td><td></td></tr><tr><td style="text-align:left">@ExtensionProperty</td><td></td><td></td><td></td></tr><tr><td style="text-align:left">@ExternalDocs</td><td></td><td></td><td></td></tr><tr><td style="text-align:left">@Info</td><td></td><td></td><td></td></tr><tr><td style="text-align:left">@License</td><td></td><td></td><td></td></tr><tr><td style="text-align:left">@ResponseHeader</td><td></td><td></td><td></td></tr><tr><td style="text-align:left">@SwaggerDefinition</td><td></td><td></td><td></td></tr><tr><td style="text-align:left">@Tag</td><td></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> swagger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/12/03/hello-world/"/>
      <url>2020/12/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a class="header-anchor" href="#Quick-Start">¶</a>Quick Start</h2><h3 id="Create-a-new-post"><a class="header-anchor" href="#Create-a-new-post">¶</a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a class="header-anchor" href="#Run-server">¶</a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a class="header-anchor" href="#Generate-static-files">¶</a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a class="header-anchor" href="#Deploy-to-remote-sites">¶</a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
